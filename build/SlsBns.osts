class Store {
    public employees: Employee[];
    public commission: Commission;
    public retro: Retro;
    constructor(public name: string, public abbr: string) {
        this.name = name;
        this.abbr = abbr;
        this.commission = { fni: 0, gross: 0, amount: 0 };
        this.retro = { mini: 0, owed: 0, payout: 0 };
        this.employees = [];
    }

    employeeExists(employeeId: number): boolean {
        return this.employees.some(emp => emp.id === employeeId);
    }

    getSaleTypeTotals(): SalesTotals {
        const sales: SalesTotals = { new: 0, used: 0 };
        this.employees.forEach(employee => {
            employee.deals.forEach(deal => {
                if(deal.vehicle.saleType === "New") {
                    sales.new++;
                } else {
                    sales.used++;
                }
            });
        });
        return sales;
    }

    getCommission() {
        this.employees.forEach((employee) => {
            employee.getCommission();
            this.commission.fni += employee.commission.fni;
            this.commission.gross += employee.commission.gross;
            this.commission.amount += employee.commission.amount;
        });
    }

    getRetro() {
        this.employees.forEach((employee) => {
            employee.getRetro();
            this.retro.mini += employee.retro.mini;
            this.retro.owed += employee.retro.owed;
            this.retro.payout += employee.retro.payout;
        });
    }
}

class Employee {
    public deals: Deal[];
    public spiff: number;
    public priorDraw: number;
    public averageUnits: number;
    public nps: NPS;
    public commission: Commission;
    public retro: Retro;
    constructor(public id: number, public name: string) {
        this.id = id;
        this.name = name;
        this.averageUnits = 0;
        this.priorDraw = 0;
        this.spiff = 0;
        this.commission = { fni: 0, gross: 0, amount: 0 };
        this.retro = { mini: 0, owed: 0, payout: 0 };
        this.deals = [];
    }

    getTotalUnits(): number {
        return this.deals.reduce((acc: number, curr: Deal) => {
            return acc + curr.unitCount;
        }, 0);
    }

    setAverageUnits(ninetyDayUnitCount: number) {
        const average = ninetyDayUnitCount / 3;
        this.averageUnits = Math.round(average);
    }

    getRetroPercentage(): number {
        const unitCount = this.getTotalUnits();
        if (unitCount >= 16) return 0.07;
        if (unitCount >= 12 && unitCount < 16) return 0.04;
        return 0;
    }

    getCommission() {
        this.deals.forEach((deal) => {
            this.commission.fni += deal.commission.fni;
            this.commission.gross += deal.commission.gross;
            this.commission.amount += deal.commission.amount;
        });
    }

    getRetro() {
        this.deals.forEach(deal => {
            const retro = deal.setRetro(this.getRetroPercentage(), this.averageUnits);
            this.retro.mini += retro.mini;
            this.retro.owed += retro.owed;
            this.retro.payout += retro.payout;
        });
    }
}

class Deal {
    public retro: Retro;
    constructor(public id: string, public date: number, public customer: Person, public vehicle: Vehicle, public unitCount: number, public commission: Commission) {
        this.id = id;
        this.date = date;
        this.customer = customer;
        this.vehicle = vehicle;
        this.unitCount = unitCount;
        this.commission = commission;
        this.retro = { mini: 0, owed: 0, payout: 0 };
    }

    setRetro(retroPercentage: number, averageUnits: number): Retro {
        const mini = calculateRetroMini(this.commission.amount, averageUnits, this.unitCount);
        const owed = mini > 0 ? mini - this.commission.amount : 0;
        const payout = mini === 0 ? this.commission.gross * retroPercentage : 0;
        this.retro = { mini: mini, owed: owed, payout: payout };
        return this.retro;
    }
}

class Vehicle {
    public year: number;
    public make: string;
    public model: string;
    public desc: string;
    constructor(public id: string, protected description: string, public saleType: string) {
        this.id = id;
        this.saleType = saleType;

        const data = description.split(',');
        this.year = Number(data[0]);
        this.make = String(data[1]);
        this.model = String(data[2]);
        this.desc = String(data[3]);
    }
}

function calculateRetroMini(commissionAmount: number, unitAvg: number, dealUnitCount: number): number {
    if (commissionAmount <= 251) {
        if (unitAvg >= 24) return 400 * dealUnitCount;
        if (unitAvg >= 20 && unitAvg < 24) return 350 * dealUnitCount;
        if (unitAvg >= 16 && unitAvg < 20) return 300 * dealUnitCount;
        if (unitAvg >= 12 && unitAvg < 16) return 250 * dealUnitCount;
        if (unitAvg >= 1 && unitAvg < 12) return 200 * dealUnitCount;
        return 0;
    }
    return 0;
}

interface Person {
    id: number;
    name: string;
}

interface SalesTotals {
    new: number;
    used: number;
}

interface TopSalesman {
    id: number;
    count: number;
}

interface FnI {
    reserve: number;
    gross: number;
    payout: number;
}

interface Bonus {
    unit: number;
    topsales: number;
    total: number;
}

interface Commission {
    fni: number;
    gross: number;
    amount: number;
}

interface Retro {
    mini: number;
    owed: number;
    payout: number;
}

interface NPS {
    surveys: number;
    current: number;
    average: number;
}

function main(workbook: ExcelScript.Workbook) {
    const initialSheets = workbook.getWorksheets();
    const store = new Store("BMW of South Miami", "BOSM");

    initialSheets.forEach(sheet => {
        const data = sheet.getUsedRange().getValues();
        let header = data.shift();
        const sheetName = sheet.getName();
        switch(sheetName) { 
            case '0432':
                const empID_0432 = header.indexOf("Salesperson#");
                const empName_0432 = header.indexOf("Salesperson Name");
                const dealID_0432 = header.indexOf("Reference#");
                const dealDate_0432 = header.indexOf("Date");
                const custID_0432 = header.indexOf("Customer#");
                const custName_0432 = header.indexOf("Customer Name");
                const vehID_0432 = header.indexOf("Stock#");
                const vehDesc_0432 = header.indexOf("Description");
                const saleType_0432 = header.indexOf("Sale Type");
                const commFni_0432 = header.indexOf("COMMBL F&I");
                const commGross_0432 = header.indexOf("COMMBL FRONT");
                const units_0432 = header.indexOf("Units");
                const commAmount_0432 = header.indexOf("Commission Amount");
                data.forEach(row => {
                    const empID = Number(row[empID_0432]);
                    const unitCount = Number(row[units_0432]);
                    if(!store.employeeExists(empID)) store.employees.push(new Employee(empID, String(row[empName_0432])));
                    const employee = store.employees.find(emp => emp.id === empID);
                    if(unitCount > 0) {
                        const customer: Person = { id: Number(row[custID_0432]), name: String(row[custName_0432]) };
                        const vehicle = new Vehicle(String(row[vehID_0432]), String(row[vehDesc_0432]), String(row[saleType_0432]));
                        const commission: Commission = { fni: Number(row[commFni_0432]), gross: Number(row[commGross_0432]), amount: Number(row[commAmount_0432]) };
                        const deal = new Deal(String(row[dealID_0432]), Number(row[dealDate_0432]), customer, vehicle, unitCount, commission );
                        employee?.deals.push(deal);
                        // employee?.commission.fni += commission.fni;
                        // store.commission.fni += commission.fni;
                        // employee?.commission.gross += commission.gross;
                        // store.commission.gross += commission.gross;
                        // employee?.commission.amount += commission.amount;
                        // store.commission.amount += commission.amount; 
                    }
                });
                break;
            case '90':
                const empID_90 = header.indexOf("Salesperson#");
                const units_90 = header.indexOf("units");
                data.forEach(row => {
                    const empID = Number(row[empID_90]);
                    const unitCount = Number(row[units_90]);
                    const employee = store.employees.find(emp => emp.id === empID);
                    employee?.setAverageUnits(unitCount);
                });
                break;
            case '3213':
                const empID_3213 = header.indexOf("Control#");
                const amount_3213 = header.indexOf("8321D");
                data.forEach(row => {
                    const empID = Number(row[empID_3213]);
                    const amount = Number(row[amount_3213]);
                    const employee = store.employees.find(emp => emp.id === empID);
                    employee?.priorDraw = amount;
                });
                break;
            case 'SPIFFS':
                const empID_spiff = header.indexOf("Employee #");
                const amount_spiff = header.indexOf("Total");
                data.forEach(row => {
                    const empID = Number(row[empID_spiff]);
                    const amount = Number(row[amount_spiff]);
                    const employee = store.employees.find(emp => emp.id === empID);
                    employee?.spiff = amount;
                });
                break;
            case 'NPS Sheet':
                header = data[1];
                const empID_nps = header.indexOf("Employee #");
                const surveyCount_nps = header.indexOf("PROMOTER");
                const current_nps = 8;
                const average_nps = 23;
                data.forEach(row => {
                    const empID = Number(row[empID_nps]);
                    const surveys = Number(row[surveyCount_nps]);
                    const current = Number(row[current_nps])*100;
                    const average = Number(row[average_nps])*100;
                    const employee = store.employees.find(emp => emp.id === empID);
                    employee?.nps = { surveys, current, average };
                });
                break;
            case 'Look Up Table':
                break;
            default: sheet.delete();
                break;
        }
    });
    store.getCommission();
    store.getRetro();
    console.log(store);
}

